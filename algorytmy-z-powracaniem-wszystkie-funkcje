import random
import sys
import time

#najbardziej optymalna jest lista następników
#macierz tez spoko ale ciut wolniejsza
#tabela krawedzi w chuj wolna, kto by sie spodziewał XD

sys.setrecursionlimit(1000000)
n=20

# x w procentach
def graf(n,x):
    l=[]
    m=[]
    count = 0
    k=x/100
    for i in range(n):
        m.append([0]*n)
    nasycenie = int((n*(n-1)*k)/2)
    # print(nasycenie)
    for i in range(n):
        l.append(i)
    random.shuffle(l)
    # print(l)
    # print()
    for i in range(len(l)-1):            
        m[l[i]][l[i+1]]+=1
        m[l[i+1]][l[i]]+=1
        count += 1
    m[l[-1]][l[0]]=1
    m[l[0]][l[-1]]=1
    count += 1
    while count<nasycenie:
        a=0;b=0;c=0
        while a==b or a==c or b==c or m[a][b]==1 or m[a][c]==1 or m[b][c]==1: 
            a,b,c = random.sample(range(0,n),3)
        m[a][b]=1; m[b][a]=1; m[a][c]=1; m[c][a]=1; m[b][c]=1; m[c][b]=1
        count += 3
    return m

def graf_bez_cyklu(n,x):
    l=[]
    m=[]
    count = 0
    k=x/100
    for i in range(n):
        m.append([0]*n)
    nasycenie = int((n*(n-1)*k)/2)
    for i in range(n):
        l.append(i)
    random.shuffle(l)
    for i in range(len(l)-1):            
        m[l[i]][l[i+1]]+=1
        m[l[i+1]][l[i]]+=1
        count += 1
    m[l[-1]][l[0]]=1
    m[l[0]][l[-1]]=1
    count += 1
    while count<nasycenie:
        a=0;b=0;c=0
        while a==b or a==c or b==c or m[a][b]==1 or m[a][c]==1 or m[b][c]==1: 
            a,b,c = random.sample(range(0,n),3)
        m[a][b]=1; m[b][a]=1; m[a][c]=1; m[c][a]=1; m[b][c]=1; m[c][b]=1
        count += 3
    j = random.randrange(0,n)
    for i in range(n):
        m[j][i]=0
        m[i][j]=0
    return m

def tabela_krawedzi(m):
    l=[]
    for i in range(len(m)):
        for j in range(len(m)):
            if m[i][j]==1:
                l.append([i,j])
    return l

def lista_nastepnikow(m):
    l=[]
    for i in range(len(m)):
        l1=[]
        for j in range(len(m)):
            if m[i][j]==1:
                l1.append(j)
        l.append(l1)
    return l

def cykle_macierz(mm):
    n=len(mm)
    O=[0]*n
    path = []
    visited=0
    start=0

    def hamilton(v,visited,path):
        O[v]=1
        visited+=1
        for i in range(n):
            if mm[v][i]==1:
                if i==start and visited==n:
                    # print(path)
                    return True
                if O[i]==0:
                    if hamilton(i,visited,path):
                        path.append(i)
                        # print(path)
                        return True
        O[v]=0
        visited -= 1
        return False

    def hcycle():
        for i in range(n):
            path.append(0)
            start=0
            visited=0
            hcycle = hamilton(start,visited,path)
            if hcycle:
                # print(hcycle)
                to_add=path[0]
                path.append(to_add)
                return path
                # break
            return False
    return hcycle()

def euler_macierz(m,v=0,stos=[]):
    n=len(m)
    for i in range(n):
        if m[v][i]==1:
            m[v][i]=0
            m[i][v]=0
            euler_macierz(m,i,stos)
    stos.append(v)
    return stos

def cykle_tabela_krawedzi(tabela,n):
    O=[0]*n
    path = []
    visited=0
    start=0

    def hamilton(v,visited,path):
        O[v]=1
        visited+=1
        for i in tabela:
            if i[0]==v:
                a = i[1]
                if a==start and visited==n:
                    # print(path)
                    return True
                if O[a]==0:
                    if hamilton(a,visited,path):
                        path.append(a)
                        # print(path)
                        return True
        O[v]=0
        visited -= 1
        return False

    def hcycle():
        for i in range(n):
            path.append(0)
            start=0
            visited=0
            hcycle = hamilton(start,visited,path)
            if hcycle:
                # print(hcycle)
                to_add=path[0]
                path.append(to_add)
                return path
                # break
            return False
    return hcycle()

def euler_tabela_krawedzi(tabela,v=0,stos=[]):
    for i in tabela:
        if i[0]==v:
            j = i[1]
            tabela.remove([v,j])
            tabela.remove([j,v])
            euler_tabela_krawedzi(tabela,j,stos)
    stos.append(v)
    return stos

def cykle_lista_nastepnikow(lista):
    n=len(lista)
    O=[0]*n
    path = []
    visited=0
    start=0

    def hamilton(v,visited,path):
        O[v]=1
        visited+=1
        for i in lista[v]:
            if i==start and visited==n:
                # print(path)
                return True
            if O[i]==0:
                if hamilton(i,visited,path):
                    path.append(i)
                    # print(path)
                    return True
        O[v]=0
        visited -= 1
        return False

    def hcycle():
        for i in range(n):
            path.append(0)
            start=0
            visited=0
            hcycle = hamilton(start,visited,path)
            if hcycle:
                # print(hcycle)
                to_add=path[0]
                path.append(to_add)
                return path
                # break
            return False
    return hcycle()

def euler_lista_nastepnikow(lista,v=0,stos=[]):
    for i in lista[v]:
        lista[v].remove(i)
        lista[i].remove(v)
        euler_lista_nastepnikow(lista,i,stos)
    stos.append(v)
    return stos

# macierz = graf(n,70)
# for i in mm:
    # print(i)
# print(macierz)
# lista = lista_nastepnikow(macierz)
# tabela = tabela_krawedzi(macierz)
# print(lista)
# print(tabela)

# x=time.time()
# a=cykle_macierz(macierz)
# y=time.time()
# print(y-x)
# print(a)

# x=time.time()
# b=euler_macierz(macierz)
# y=time.time()
# print(y-x)
# print(b)

# x=time.time()    
# c = cykle_tabela_krawedzi(tabela,n)
# y=time.time()
# print(y-x)
# print(c)

# x=time.time()
# d = euler_tabela_krawedzi(tabela)
# y=time.time()
# print(y-x)
# print(d)

# x=time.time()
# e = cykle_lista_nastepnikow(lista)
# y=time.time()
# print(y-x)
# print(e)

# x=time.time()
f = euler_lista_nastepnikow(lista)
# y=time.time()
# print(y-x)
# print(f)
